[{"C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\index.js":"1","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\App.js":"2","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\Produtos.js":"3","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\Orcamentos.js":"4","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\NovoOrcamento.js":"5"},{"size":264,"mtime":1750258935908,"results":"6","hashOfConfig":"7"},{"size":2054,"mtime":1750258971857,"results":"8","hashOfConfig":"7"},{"size":7152,"mtime":1750259004498,"results":"9","hashOfConfig":"7"},{"size":6518,"mtime":1750259028483,"results":"10","hashOfConfig":"7"},{"size":8392,"mtime":1750259064163,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f8o1oo",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\index.js",[],"C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\App.js",[],"C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\Produtos.js",["25"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Plus, Edit, Trash2, X, Save } from 'lucide-react';\r\n\r\nconst Produtos = () => {\r\n  const [produtos, setProdutos] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [editingProduto, setEditingProduto] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    nome: '',\r\n    preco: '',\r\n    descricao: ''\r\n  });\r\n  const [alert, setAlert] = useState({ show: false, message: '', type: '' });\r\n\r\n  useEffect(() => {\r\n    fetchProdutos();\r\n  }, []);\r\n\r\n  const fetchProdutos = async () => {\r\n    try {\r\n      const response = await axios.get('/api/produtos');\r\n      setProdutos(response.data);\r\n    } catch (error) {\r\n      showAlert('Erro ao carregar produtos', 'danger');\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({ show: true, message, type });\r\n    setTimeout(() => setAlert({ show: false, message: '', type: '' }), 3000);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      if (editingProduto) {\r\n        await axios.put(`/api/produtos/${editingProduto.id}`, formData);\r\n        showAlert('Produto atualizado com sucesso!', 'success');\r\n      } else {\r\n        await axios.post('/api/produtos', formData);\r\n        showAlert('Produto cadastrado com sucesso!', 'success');\r\n      }\r\n      \r\n      setShowModal(false);\r\n      setEditingProduto(null);\r\n      setFormData({ nome: '', preco: '', descricao: '' });\r\n      fetchProdutos();\r\n    } catch (error) {\r\n      showAlert('Erro ao salvar produto', 'danger');\r\n    }\r\n  };\r\n\r\n  const handleEdit = (produto) => {\r\n    setEditingProduto(produto);\r\n    setFormData({\r\n      nome: produto.nome,\r\n      preco: produto.preco.toString(),\r\n      descricao: produto.descricao\r\n    });\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Tem certeza que deseja excluir este produto?')) {\r\n      try {\r\n        await axios.delete(`/api/produtos/${id}`);\r\n        showAlert('Produto excluído com sucesso!', 'success');\r\n        fetchProdutos();\r\n      } catch (error) {\r\n        showAlert('Erro ao excluir produto', 'danger');\r\n      }\r\n    }\r\n  };\r\n\r\n  const openModal = () => {\r\n    setEditingProduto(null);\r\n    setFormData({ nome: '', preco: '', descricao: '' });\r\n    setShowModal(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n    setEditingProduto(null);\r\n    setFormData({ nome: '', preco: '', descricao: '' });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h1>Gerenciar Produtos</h1>\r\n        <button className=\"btn btn-primary\" onClick={openModal}>\r\n          <Plus size={16} />\r\n          Novo Produto\r\n        </button>\r\n      </div>\r\n\r\n      {alert.show && (\r\n        <div className={`alert alert-${alert.type}`}>\r\n          {alert.message}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"card\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Nome</th>\r\n              <th>Preço</th>\r\n              <th>Descrição</th>\r\n              <th>Data de Criação</th>\r\n              <th>Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {produtos.map((produto) => (\r\n              <tr key={produto.id}>\r\n                <td>{produto.nome}</td>\r\n                <td>R$ {produto.preco.toFixed(2)}</td>\r\n                <td>{produto.descricao}</td>\r\n                <td>{new Date(produto.dataCriacao).toLocaleDateString('pt-BR')}</td>\r\n                <td>\r\n                  <div className=\"flex gap-2\">\r\n                    <button\r\n                      className=\"btn btn-primary\"\r\n                      onClick={() => handleEdit(produto)}\r\n                      style={{ padding: '5px 10px', fontSize: '12px' }}\r\n                    >\r\n                      <Edit size={14} />\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-danger\"\r\n                      onClick={() => handleDelete(produto.id)}\r\n                      style={{ padding: '5px 10px', fontSize: '12px' }}\r\n                    >\r\n                      <Trash2 size={14} />\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {produtos.length === 0 && (\r\n          <div className=\"text-center\" style={{ padding: '40px' }}>\r\n            <p>Nenhum produto cadastrado ainda.</p>\r\n            <button className=\"btn btn-primary mt-4\" onClick={openModal}>\r\n              Cadastrar Primeiro Produto\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {showModal && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2 className=\"modal-title\">\r\n                {editingProduto ? 'Editar Produto' : 'Novo Produto'}\r\n              </h2>\r\n              <button className=\"close\" onClick={closeModal}>\r\n                <X size={24} />\r\n              </button>\r\n            </div>\r\n            \r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"nome\">Nome *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nome\"\r\n                  className=\"form-control\"\r\n                  value={formData.nome}\r\n                  onChange={(e) => setFormData({ ...formData, nome: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"preco\">Preço *</label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"preco\"\r\n                  className=\"form-control\"\r\n                  value={formData.preco}\r\n                  onChange={(e) => setFormData({ ...formData, preco: e.target.value })}\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"descricao\">Descrição</label>\r\n                <textarea\r\n                  id=\"descricao\"\r\n                  className=\"form-control\"\r\n                  value={formData.descricao}\r\n                  onChange={(e) => setFormData({ ...formData, descricao: e.target.value })}\r\n                  rows=\"3\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"flex gap-2 justify-between\">\r\n                <button type=\"button\" className=\"btn\" onClick={closeModal}>\r\n                  Cancelar\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  <Save size={16} />\r\n                  {editingProduto ? 'Atualizar' : 'Cadastrar'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Produtos; ","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\Orcamentos.js",["26"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Trash2, Eye, FileText } from 'lucide-react';\r\n\r\nconst Orcamentos = () => {\r\n  const [orcamentos, setOrcamentos] = useState([]);\r\n  const [selectedOrcamento, setSelectedOrcamento] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [alert, setAlert] = useState({ show: false, message: '', type: '' });\r\n\r\n  useEffect(() => {\r\n    fetchOrcamentos();\r\n  }, []);\r\n\r\n  const fetchOrcamentos = async () => {\r\n    try {\r\n      const response = await axios.get('/api/orcamentos');\r\n      setOrcamentos(response.data);\r\n    } catch (error) {\r\n      showAlert('Erro ao carregar orçamentos', 'danger');\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({ show: true, message, type });\r\n    setTimeout(() => setAlert({ show: false, message: '', type: '' }), 3000);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Tem certeza que deseja excluir este orçamento?')) {\r\n      try {\r\n        await axios.delete(`/api/orcamentos/${id}`);\r\n        showAlert('Orçamento excluído com sucesso!', 'success');\r\n        fetchOrcamentos();\r\n      } catch (error) {\r\n        showAlert('Erro ao excluir orçamento', 'danger');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleView = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/orcamentos/${id}`);\r\n      setSelectedOrcamento(response.data);\r\n      setShowModal(true);\r\n    } catch (error) {\r\n      showAlert('Erro ao carregar detalhes do orçamento', 'danger');\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n    setSelectedOrcamento(null);\r\n  };\r\n\r\n  const formatCurrency = (value) => {\r\n    return new Intl.NumberFormat('pt-BR', {\r\n      style: 'currency',\r\n      currency: 'BRL'\r\n    }).format(value);\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h1>Orçamentos</h1>\r\n      </div>\r\n\r\n      {alert.show && (\r\n        <div className={`alert alert-${alert.type}`}>\r\n          {alert.message}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"card\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Cliente</th>\r\n              <th>Total</th>\r\n              <th>Itens</th>\r\n              <th>Data de Criação</th>\r\n              <th>Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orcamentos.map((orcamento) => (\r\n              <tr key={orcamento.id}>\r\n                <td>{orcamento.cliente}</td>\r\n                <td>{formatCurrency(orcamento.total)}</td>\r\n                <td>{orcamento.itens.length} item(s)</td>\r\n                <td>{formatDate(orcamento.dataCriacao)}</td>\r\n                <td>\r\n                  <div className=\"flex gap-2\">\r\n                    <button\r\n                      className=\"btn btn-primary\"\r\n                      onClick={() => handleView(orcamento.id)}\r\n                      style={{ padding: '5px 10px', fontSize: '12px' }}\r\n                    >\r\n                      <Eye size={14} />\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-danger\"\r\n                      onClick={() => handleDelete(orcamento.id)}\r\n                      style={{ padding: '5px 10px', fontSize: '12px' }}\r\n                    >\r\n                      <Trash2 size={14} />\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {orcamentos.length === 0 && (\r\n          <div className=\"text-center\" style={{ padding: '40px' }}>\r\n            <FileText size={48} style={{ color: '#ccc', marginBottom: '16px' }} />\r\n            <p>Nenhum orçamento criado ainda.</p>\r\n            <p style={{ color: '#666', fontSize: '14px' }}>\r\n              Crie seu primeiro orçamento na seção \"Novo Orçamento\"\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {showModal && selectedOrcamento && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\" style={{ maxWidth: '800px' }}>\r\n            <div className=\"modal-header\">\r\n              <h2 className=\"modal-title\">\r\n                <FileText size={20} style={{ marginRight: '8px' }} />\r\n                Orçamento - {selectedOrcamento.cliente}\r\n              </h2>\r\n              <button className=\"close\" onClick={closeModal}>\r\n                ✕\r\n              </button>\r\n            </div>\r\n            \r\n            <div style={{ marginBottom: '20px' }}>\r\n              <p><strong>Cliente:</strong> {selectedOrcamento.cliente}</p>\r\n              <p><strong>Data:</strong> {formatDate(selectedOrcamento.dataCriacao)}</p>\r\n              {selectedOrcamento.observacoes && (\r\n                <p><strong>Observações:</strong> {selectedOrcamento.observacoes}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"card\" style={{ marginBottom: '20px' }}>\r\n              <h3 style={{ marginBottom: '15px' }}>Itens do Orçamento</h3>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Produto</th>\r\n                    <th>Quantidade</th>\r\n                    <th>Preço Unit.</th>\r\n                    <th>Subtotal</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {selectedOrcamento.itens.map((item) => (\r\n                    <tr key={item.id}>\r\n                      <td>{item.nome}</td>\r\n                      <td>{item.quantidade}</td>\r\n                      <td>{formatCurrency(item.preco)}</td>\r\n                      <td>{formatCurrency(item.subtotal)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"total-section\">\r\n              <h3>Total: {formatCurrency(selectedOrcamento.total)}</h3>\r\n            </div>\r\n\r\n            <div className=\"text-right\">\r\n              <button className=\"btn\" onClick={closeModal}>\r\n                Fechar\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orcamentos; ","C:\\Users\\paulo\\Downloads\\fazedororcamento\\frontend\\src\\components\\NovoOrcamento.js",["27"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Plus, Trash2, Save, User, FileText } from 'lucide-react';\r\n\r\nconst NovoOrcamento = () => {\r\n  const [produtos, setProdutos] = useState([]);\r\n  const [formData, setFormData] = useState({\r\n    cliente: '',\r\n    observacoes: ''\r\n  });\r\n  const [itens, setItens] = useState([]);\r\n  const [alert, setAlert] = useState({ show: false, message: '', type: '' });\r\n\r\n  useEffect(() => {\r\n    fetchProdutos();\r\n  }, []);\r\n\r\n  const fetchProdutos = async () => {\r\n    try {\r\n      const response = await axios.get('/api/produtos');\r\n      setProdutos(response.data);\r\n    } catch (error) {\r\n      showAlert('Erro ao carregar produtos', 'danger');\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({ show: true, message, type });\r\n    setTimeout(() => setAlert({ show: false, message: '', type: '' }), 3000);\r\n  };\r\n\r\n  const addItem = () => {\r\n    if (produtos.length === 0) {\r\n      showAlert('Cadastre produtos primeiro antes de criar um orçamento', 'danger');\r\n      return;\r\n    }\r\n\r\n    const newItem = {\r\n      id: Date.now(),\r\n      produtoId: '',\r\n      nome: '',\r\n      quantidade: 1,\r\n      preco: 0,\r\n      subtotal: 0\r\n    };\r\n\r\n    setItens([...itens, newItem]);\r\n  };\r\n\r\n  const removeItem = (index) => {\r\n    const newItens = itens.filter((_, i) => i !== index);\r\n    setItens(newItens);\r\n  };\r\n\r\n  const updateItem = (index, field, value) => {\r\n    const newItens = [...itens];\r\n    newItens[index] = { ...newItens[index], [field]: value };\r\n\r\n    // Se o produto foi selecionado, atualizar nome e preço\r\n    if (field === 'produtoId') {\r\n      const produto = produtos.find(p => p.id === value);\r\n      if (produto) {\r\n        newItens[index].nome = produto.nome;\r\n        newItens[index].preco = produto.preco;\r\n        newItens[index].subtotal = produto.preco * newItens[index].quantidade;\r\n      }\r\n    }\r\n\r\n    // Se a quantidade foi alterada, recalcular subtotal\r\n    if (field === 'quantidade') {\r\n      newItens[index].quantidade = parseInt(value) || 0;\r\n      newItens[index].subtotal = newItens[index].preco * newItens[index].quantidade;\r\n    }\r\n\r\n    setItens(newItens);\r\n  };\r\n\r\n  const calculateTotal = () => {\r\n    return itens.reduce((sum, item) => sum + item.subtotal, 0);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!formData.cliente.trim()) {\r\n      showAlert('Nome do cliente é obrigatório', 'danger');\r\n      return;\r\n    }\r\n\r\n    if (itens.length === 0) {\r\n      showAlert('Adicione pelo menos um item ao orçamento', 'danger');\r\n      return;\r\n    }\r\n\r\n    // Validar se todos os itens têm produto selecionado\r\n    const invalidItems = itens.filter(item => !item.produtoId);\r\n    if (invalidItems.length > 0) {\r\n      showAlert('Todos os itens devem ter um produto selecionado', 'danger');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const orcamentoData = {\r\n        cliente: formData.cliente,\r\n        observacoes: formData.observacoes,\r\n        itens: itens.map(item => ({\r\n          produtoId: item.produtoId,\r\n          nome: item.nome,\r\n          quantidade: item.quantidade,\r\n          preco: item.preco\r\n        }))\r\n      };\r\n\r\n      await axios.post('/api/orcamentos', orcamentoData);\r\n      showAlert('Orçamento criado com sucesso!', 'success');\r\n      \r\n      // Limpar formulário\r\n      setFormData({ cliente: '', observacoes: '' });\r\n      setItens([]);\r\n    } catch (error) {\r\n      showAlert('Erro ao criar orçamento', 'danger');\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value) => {\r\n    return new Intl.NumberFormat('pt-BR', {\r\n      style: 'currency',\r\n      currency: 'BRL'\r\n    }).format(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h1>Novo Orçamento</h1>\r\n      </div>\r\n\r\n      {alert.show && (\r\n        <div className={`alert alert-${alert.type}`}>\r\n          {alert.message}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"card mb-4\">\r\n          <h2 style={{ marginBottom: '20px', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n            <User size={20} />\r\n            Informações do Cliente\r\n          </h2>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"cliente\">Nome do Cliente *</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"cliente\"\r\n              className=\"form-control\"\r\n              value={formData.cliente}\r\n              onChange={(e) => setFormData({ ...formData, cliente: e.target.value })}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"observacoes\">Observações</label>\r\n            <textarea\r\n              id=\"observacoes\"\r\n              className=\"form-control\"\r\n              value={formData.observacoes}\r\n              onChange={(e) => setFormData({ ...formData, observacoes: e.target.value })}\r\n              rows=\"3\"\r\n              placeholder=\"Observações adicionais sobre o orçamento...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card mb-4\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n              <FileText size={20} />\r\n              Itens do Orçamento\r\n            </h2>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={addItem}\r\n            >\r\n              <Plus size={16} />\r\n              Adicionar Item\r\n            </button>\r\n          </div>\r\n\r\n          {itens.length === 0 && (\r\n            <div className=\"text-center\" style={{ padding: '40px', color: '#666' }}>\r\n              <FileText size={48} style={{ color: '#ccc', marginBottom: '16px' }} />\r\n              <p>Nenhum item adicionado ainda.</p>\r\n              <p>Clique em \"Adicionar Item\" para começar.</p>\r\n            </div>\r\n          )}\r\n\r\n          {itens.map((item, index) => (\r\n            <div key={item.id} className=\"item-row\">\r\n              <select\r\n                className=\"form-control\"\r\n                value={item.produtoId}\r\n                onChange={(e) => updateItem(index, 'produtoId', e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Selecione um produto</option>\r\n                {produtos.map((produto) => (\r\n                  <option key={produto.id} value={produto.id}>\r\n                    {produto.nome} - {formatCurrency(produto.preco)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              \r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                placeholder=\"Qtd\"\r\n                value={item.quantidade}\r\n                onChange={(e) => updateItem(index, 'quantidade', e.target.value)}\r\n                min=\"1\"\r\n                style={{ width: '80px' }}\r\n                required\r\n              />\r\n              \r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={formatCurrency(item.preco)}\r\n                readOnly\r\n                style={{ width: '120px' }}\r\n              />\r\n              \r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={formatCurrency(item.subtotal)}\r\n                readOnly\r\n                style={{ width: '120px' }}\r\n              />\r\n              \r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => removeItem(index)}\r\n                style={{ padding: '8px 12px' }}\r\n              >\r\n                <Trash2 size={16} />\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n          {itens.length > 0 && (\r\n            <div className=\"total-section\">\r\n              <h3>Total: {formatCurrency(calculateTotal())}</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"text-right\">\r\n          <button type=\"submit\" className=\"btn btn-success\" disabled={itens.length === 0}>\r\n            <Save size={16} />\r\n            Criar Orçamento\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovoOrcamento; ",{"ruleId":"28","severity":1,"message":"29","line":18,"column":6,"nodeType":"30","endLine":18,"endColumn":8,"suggestions":"31"},{"ruleId":"28","severity":1,"message":"32","line":13,"column":6,"nodeType":"30","endLine":13,"endColumn":8,"suggestions":"33"},{"ruleId":"28","severity":1,"message":"29","line":16,"column":6,"nodeType":"30","endLine":16,"endColumn":8,"suggestions":"34"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProdutos'. Either include it or remove the dependency array.","ArrayExpression",["35"],"React Hook useEffect has a missing dependency: 'fetchOrcamentos'. Either include it or remove the dependency array.",["36"],["37"],{"desc":"38","fix":"39"},{"desc":"40","fix":"41"},{"desc":"38","fix":"42"},"Update the dependencies array to be: [fetchProdutos]",{"range":"43","text":"44"},"Update the dependencies array to be: [fetchOrcamentos]",{"range":"45","text":"46"},{"range":"47","text":"44"},[568,570],"[fetchProdutos]",[473,475],"[fetchOrcamentos]",[495,497]]